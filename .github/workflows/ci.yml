on:
    workflow_call:
        inputs:
            project_name:
                type: string
                default: "sg-ci"
            excluded_jobs:
                type: string
                default: ""
            package_manager:
                type: string
                default: "npm"
            npm_token:
                type: string
                default: ""
            build_command:
                type: string
                default: "npm run build"
            docker_build_command:
                type: string
                default: "docker build -t local:latest ."
            lint_command:
                type: string
                default: "npm run lint"

jobs:

    sast:
        name: SAST Scan using semgrep
        if: ${{ !contains( inputs.excluded_jobs, 'sast' ) && (github.actor != 'dependabot[bot]') }}
        runs-on: ubuntu-latest
        permissions: write-all
        container:
            image: public.ecr.aws/u6u3h0g1/docker-nodejs-ci:2.0
        steps:
            - name: Checkout
              uses: actions/checkout@v2
            - name: SAST Scan
              run: |
                semgrep scan --config "p/default" --config /root/configs/semgrep/rules/eslint.yml --sarif > semgrep.sarif
                cat semgrep.sarif
    sbom:
        name: SBOM Generator using CycloneDX
        runs-on: ubuntu-latest
        permissions: write-all
        container:
            image: public.ecr.aws/u6u3h0g1/docker-nodejs-ci:1.0
        steps:
            - name: Checkout
              uses: actions/checkout@v2
            - name: OSV Scan
              run: |
                cdxgen -r -o bom.xml -p
              env:
                FETCH_LICENSE: true
                GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            - name: Upload Artifact
              uses: actions/upload-artifact@v2
              with:
                name: sbom
                path: bom.xml

    osv:
        name: OSV/Dependency Scan using Google OSV
        needs: sbom
        if: ${{ !contains( inputs.excluded_jobs, 'osv' ) && (github.actor != 'dependabot[bot]') }}
        runs-on: ubuntu-latest
        permissions: write-all
        container:
            image: public.ecr.aws/u6u3h0g1/docker-nodejs-ci:1.0
        steps:
            - name: Download Artifact
              uses: actions/download-artifact@v2
              with:
                name: sbom
                path: .
            - name: OSV Scan
              run: |
                osv-scanner --format table --sbom=bom.xml
    
    gitleaks:
        name: Gitleaks scan to find secrets
        if: ${{ !contains( inputs.excluded_jobs, 'gitleaks' ) && (github.actor != 'dependabot[bot]') }}
        runs-on: ubuntu-latest
        permissions: write-all
        steps:
            - name: Checkout
              uses: actions/checkout@v3
              with:
                fetch-depth: 0
            - name: Gitleaks scan
              uses:  gitleaks/gitleaks-action@v1.6.0
              env:
                GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    lint:
        name: eslint scan to find linting issues
        if: ${{ !contains( inputs.excluded_jobs, 'lint' ) && (github.actor != 'dependabot[bot]') }}
        runs-on: ubuntu-latest
        permissions: write-all
        container:
            image: public.ecr.aws/u6u3h0g1/docker-nodejs-ci:2.0
        steps:
            - name: Checkout
              uses: actions/checkout@v2
            - name: Install dependencies
              run: |
                ${{ inputs.package_manager }} install
            - name: Eslint scan
              run: |
                ${{ inputs.lint_command }}
    
    build:
        name: project build check
        if: ${{ !contains( inputs.excluded_jobs, 'build' ) && (github.actor != 'dependabot[bot]') }}
        runs-on: ubuntu-latest
        permissions: write-all
        container:
            image: public.ecr.aws/u6u3h0g1/docker-nodejs-ci:1.0
        steps:
            - name: Checkout
              uses: actions/checkout@v2
            - name: Install dependencies
              run: |
                ${{ inputs.package_manager }} install
            - name: Build project
              run: |
                ${{ inputs.build_command }}

    docker:
        name: Docker build check
        if: ${{ !contains( inputs.excluded_jobs, 'docker' ) && (github.actor != 'dependabot[bot]') }}
        runs-on: ubuntu-latest
        permissions: write-all
        steps:
            - name: Checkout
              uses: actions/checkout@v2
            - name: Docker Build project
              run: |
                ${{ inputs.docker_build_command }}
    
    danger:
        name: run danger check
        if: ${{ !contains( inputs.excluded_jobs, 'lint' ) && (github.actor != 'dependabot[bot]') }}
        runs-on: ubuntu-latest
        permissions: write-all
        container:
            image: public.ecr.aws/u6u3h0g1/docker-nodejs-ci:2.0
        steps:
            - name: Checkout
              uses: actions/checkout@v2
            - name: Install dependencies
              run: |
                ${{ inputs.package_manager }} install
            - name: danger check
              run: |
                cp /root/configs/dangerfile.ts dangerfile.ts
                danger ci
              env:
                GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}